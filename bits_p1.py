# -*- coding: utf-8 -*-
"""BITS_P1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d8nlWW9MvrQdGsA-rwoGfrlab2S_gxVo
"""

import json
from llama_index.core import SimpleDirectoryReader
from llama_parse import LlamaParse
import re
import gender_guesser.detector as gender

# Initialize LlamaParse with API key (replace 'your_api_key' with actual key)
llama_parser = LlamaParse(api_key="llx-IaW0QNcKnFB6abjSIsOSXCR1BXiP9v6gOUTTMR4dKi0HPHpt", result_type="markdown")

# Initialize gender detector
detector = gender.Detector()

def extract_text_from_pdf(pdf_path):
    """Extracts text from a PDF using LlamaParse."""
    reader = SimpleDirectoryReader(input_files=[pdf_path])
    documents = reader.load_data()
    text = "\n".join([doc.text for doc in documents])
    return text

def determine_gender(text, character_name):
    """Determines gender first by name, then by pronoun references in the story."""

    # Step 1: Try detecting gender based on name
    gender_prediction = detector.get_gender(character_name)
    if gender_prediction in ["male", "mostly_male"]:
        return "Male"
    elif gender_prediction in ["female", "mostly_female"]:
        return "Female"

    # Step 2: Fallback to pronoun-based gender detection
    pronoun_patterns = {
        "Male": re.compile(rf"\b(?:he|him|his|Mr\.)\b.*?\b{character_name}\b", re.IGNORECASE),
        "Female": re.compile(rf"\b(?:she|her|hers|Ms\.|Miss)\b.*?\b{character_name}\b", re.IGNORECASE)
    }

    for gender, pattern in pronoun_patterns.items():
        if pattern.search(text):
            return gender

    return "Unknown"

def parse_dialogues(text):
    """Parses dialogues from the extracted text, identifies speakers, and assigns gender."""
    dialogue_pattern = re.compile(r"(\w+):\s*\"(.*?)\"", re.MULTILINE)
    dialogues = []
    characters = set()

    for match in dialogue_pattern.finditer(text):
        character = match.group(1)
        spoken_line = match.group(2)
        characters.add(character)

    character_genders = {char: determine_gender(text, char) for char in characters}

    for match in dialogue_pattern.finditer(text):
        character = match.group(1)
        spoken_line = match.group(2)
        gender = character_genders.get(character, "Unknown")
        dialogues.append({"name": character, "gender": gender, "dialogue": spoken_line})

    return dialogues

def main():
    pdf_path = "/content/SampleStory.pdf"  # Change this to the actual PDF file path
    text = extract_text_from_pdf(pdf_path)
    dialogues = parse_dialogues(text)

    # Convert to JSON and print
    json_output = json.dumps(dialogues, indent=4)
    print(json_output)

if __name__ == "__main__":
    main()
